{"mappings":"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","sources":["<anon>","src/scripts/main.js","node_modules/hammerjs/hammer.js","src/modules/Game.class.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/* eslint-disable no-console */ var $0d122d992128478a$exports = {};\n/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */ (function(window1, document1, exportName, undefined) {\n    \"use strict\";\n    var VENDOR_PREFIXES = [\n        \"\",\n        \"webkit\",\n        \"Moz\",\n        \"MS\",\n        \"ms\",\n        \"o\"\n    ];\n    var TEST_ELEMENT = document1.createElement(\"div\");\n    var TYPE_FUNCTION = \"function\";\n    var round = Math.round;\n    var abs = Math.abs;\n    var now = Date.now;\n    /**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */ function setTimeoutContext(fn, timeout, context) {\n        return setTimeout(bindFn(fn, context), timeout);\n    }\n    /**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */ function invokeArrayArg(arg, fn, context) {\n        if (Array.isArray(arg)) {\n            each(arg, context[fn], context);\n            return true;\n        }\n        return false;\n    }\n    /**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */ function each(obj, iterator, context) {\n        var i;\n        if (!obj) return;\n        if (obj.forEach) obj.forEach(iterator, context);\n        else if (obj.length !== undefined) {\n            i = 0;\n            while(i < obj.length){\n                iterator.call(context, obj[i], i, obj);\n                i++;\n            }\n        } else for(i in obj)obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n    }\n    /**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */ function deprecate(method, name, message) {\n        var deprecationMessage = \"DEPRECATED METHOD: \" + name + \"\\n\" + message + \" AT \\n\";\n        return function() {\n            var e = new Error(\"get-stack-trace\");\n            var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, \"\").replace(/^\\s+at\\s+/gm, \"\").replace(/^Object.<anonymous>\\s*\\(/gm, \"{anonymous}()@\") : \"Unknown Stack Trace\";\n            var log = window1.console && (window1.console.warn || window1.console.log);\n            if (log) log.call(window1.console, deprecationMessage, stack);\n            return method.apply(this, arguments);\n        };\n    }\n    /**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */ var assign;\n    if (typeof Object.assign !== \"function\") assign = function assign(target) {\n        if (target === undefined || target === null) throw new TypeError(\"Cannot convert undefined or null to object\");\n        var output = Object(target);\n        for(var index = 1; index < arguments.length; index++){\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for(var nextKey in source)if (source.hasOwnProperty(nextKey)) output[nextKey] = source[nextKey];\n            }\n        }\n        return output;\n    };\n    else assign = Object.assign;\n    /**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */ var extend = deprecate(function extend(dest, src, merge) {\n        var keys = Object.keys(src);\n        var i = 0;\n        while(i < keys.length){\n            if (!merge || merge && dest[keys[i]] === undefined) dest[keys[i]] = src[keys[i]];\n            i++;\n        }\n        return dest;\n    }, \"extend\", \"Use `assign`.\");\n    /**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */ var merge = deprecate(function merge(dest, src) {\n        return extend(dest, src, true);\n    }, \"merge\", \"Use `assign`.\");\n    /**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */ function inherit(child, base, properties) {\n        var baseP = base.prototype, childP;\n        childP = child.prototype = Object.create(baseP);\n        childP.constructor = child;\n        childP._super = baseP;\n        if (properties) assign(childP, properties);\n    }\n    /**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */ function bindFn(fn, context) {\n        return function boundFn() {\n            return fn.apply(context, arguments);\n        };\n    }\n    /**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */ function boolOrFn(val, args) {\n        if (typeof val == TYPE_FUNCTION) return val.apply(args ? args[0] || undefined : undefined, args);\n        return val;\n    }\n    /**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */ function ifUndefined(val1, val2) {\n        return val1 === undefined ? val2 : val1;\n    }\n    /**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */ function addEventListeners(target, types, handler) {\n        each(splitStr(types), function(type) {\n            target.addEventListener(type, handler, false);\n        });\n    }\n    /**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */ function removeEventListeners(target, types, handler) {\n        each(splitStr(types), function(type) {\n            target.removeEventListener(type, handler, false);\n        });\n    }\n    /**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */ function hasParent(node, parent) {\n        while(node){\n            if (node == parent) return true;\n            node = node.parentNode;\n        }\n        return false;\n    }\n    /**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */ function inStr(str, find) {\n        return str.indexOf(find) > -1;\n    }\n    /**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */ function splitStr(str) {\n        return str.trim().split(/\\s+/g);\n    }\n    /**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */ function inArray(src, find, findByKey) {\n        if (src.indexOf && !findByKey) return src.indexOf(find);\n        else {\n            var i = 0;\n            while(i < src.length){\n                if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) return i;\n                i++;\n            }\n            return -1;\n        }\n    }\n    /**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */ function toArray(obj) {\n        return Array.prototype.slice.call(obj, 0);\n    }\n    /**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */ function uniqueArray(src, key, sort) {\n        var results = [];\n        var values = [];\n        var i = 0;\n        while(i < src.length){\n            var val = key ? src[i][key] : src[i];\n            if (inArray(values, val) < 0) results.push(src[i]);\n            values[i] = val;\n            i++;\n        }\n        if (sort) {\n            if (!key) results = results.sort();\n            else results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n        return results;\n    }\n    /**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */ function prefixed(obj, property) {\n        var prefix, prop;\n        var camelProp = property[0].toUpperCase() + property.slice(1);\n        var i = 0;\n        while(i < VENDOR_PREFIXES.length){\n            prefix = VENDOR_PREFIXES[i];\n            prop = prefix ? prefix + camelProp : property;\n            if (prop in obj) return prop;\n            i++;\n        }\n        return undefined;\n    }\n    /**\n * get a unique id\n * @returns {number} uniqueId\n */ var _uniqueId = 1;\n    function uniqueId() {\n        return _uniqueId++;\n    }\n    /**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */ function getWindowForElement(element) {\n        var doc = element.ownerDocument || element;\n        return doc.defaultView || doc.parentWindow || window1;\n    }\n    var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n    var SUPPORT_TOUCH = \"ontouchstart\" in window1;\n    var SUPPORT_POINTER_EVENTS = prefixed(window1, \"PointerEvent\") !== undefined;\n    var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n    var INPUT_TYPE_TOUCH = \"touch\";\n    var INPUT_TYPE_PEN = \"pen\";\n    var INPUT_TYPE_MOUSE = \"mouse\";\n    var INPUT_TYPE_KINECT = \"kinect\";\n    var COMPUTE_INTERVAL = 25;\n    var INPUT_START = 1;\n    var INPUT_MOVE = 2;\n    var INPUT_END = 4;\n    var INPUT_CANCEL = 8;\n    var DIRECTION_NONE = 1;\n    var DIRECTION_LEFT = 2;\n    var DIRECTION_RIGHT = 4;\n    var DIRECTION_UP = 8;\n    var DIRECTION_DOWN = 16;\n    var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\n    var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\n    var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n    var PROPS_XY = [\n        \"x\",\n        \"y\"\n    ];\n    var PROPS_CLIENT_XY = [\n        \"clientX\",\n        \"clientY\"\n    ];\n    /**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */ function Input(manager, callback) {\n        var self1 = this;\n        this.manager = manager;\n        this.callback = callback;\n        this.element = manager.element;\n        this.target = manager.options.inputTarget;\n        // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n        // so when disabled the input events are completely bypassed.\n        this.domHandler = function(ev) {\n            if (boolOrFn(manager.options.enable, [\n                manager\n            ])) self1.handler(ev);\n        };\n        this.init();\n    }\n    Input.prototype = {\n        /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */ handler: function() {},\n        /**\n     * bind the events\n     */ init: function() {\n            this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n            this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n            this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n        },\n        /**\n     * unbind the events\n     */ destroy: function() {\n            this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n            this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n            this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n        }\n    };\n    /**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */ function createInputInstance(manager) {\n        var Type;\n        var inputClass = manager.options.inputClass;\n        if (inputClass) Type = inputClass;\n        else if (SUPPORT_POINTER_EVENTS) Type = PointerEventInput;\n        else if (SUPPORT_ONLY_TOUCH) Type = TouchInput;\n        else if (!SUPPORT_TOUCH) Type = MouseInput;\n        else Type = TouchMouseInput;\n        return new Type(manager, inputHandler);\n    }\n    /**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */ function inputHandler(manager, eventType, input) {\n        var pointersLen = input.pointers.length;\n        var changedPointersLen = input.changedPointers.length;\n        var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;\n        var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;\n        input.isFirst = !!isFirst;\n        input.isFinal = !!isFinal;\n        if (isFirst) manager.session = {};\n        // source event is the normalized value of the domEvents\n        // like 'touchstart, mouseup, pointerdown'\n        input.eventType = eventType;\n        // compute scale, rotation etc\n        computeInputData(manager, input);\n        // emit secret event\n        manager.emit(\"hammer.input\", input);\n        manager.recognize(input);\n        manager.session.prevInput = input;\n    }\n    /**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */ function computeInputData(manager, input) {\n        var session = manager.session;\n        var pointers = input.pointers;\n        var pointersLength = pointers.length;\n        // store the first input to calculate the distance and direction\n        if (!session.firstInput) session.firstInput = simpleCloneInputData(input);\n        // to compute scale and rotation we need to store the multiple touches\n        if (pointersLength > 1 && !session.firstMultiple) session.firstMultiple = simpleCloneInputData(input);\n        else if (pointersLength === 1) session.firstMultiple = false;\n        var firstInput = session.firstInput;\n        var firstMultiple = session.firstMultiple;\n        var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n        var center = input.center = getCenter(pointers);\n        input.timeStamp = now();\n        input.deltaTime = input.timeStamp - firstInput.timeStamp;\n        input.angle = getAngle(offsetCenter, center);\n        input.distance = getDistance(offsetCenter, center);\n        computeDeltaXY(session, input);\n        input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n        var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n        input.overallVelocityX = overallVelocity.x;\n        input.overallVelocityY = overallVelocity.y;\n        input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;\n        input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n        input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n        input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;\n        computeIntervalInputData(session, input);\n        // find the correct target\n        var target = manager.element;\n        if (hasParent(input.srcEvent.target, target)) target = input.srcEvent.target;\n        input.target = target;\n    }\n    function computeDeltaXY(session, input) {\n        var center = input.center;\n        var offset = session.offsetDelta || {};\n        var prevDelta = session.prevDelta || {};\n        var prevInput = session.prevInput || {};\n        if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n            prevDelta = session.prevDelta = {\n                x: prevInput.deltaX || 0,\n                y: prevInput.deltaY || 0\n            };\n            offset = session.offsetDelta = {\n                x: center.x,\n                y: center.y\n            };\n        }\n        input.deltaX = prevDelta.x + (center.x - offset.x);\n        input.deltaY = prevDelta.y + (center.y - offset.y);\n    }\n    /**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */ function computeIntervalInputData(session, input) {\n        var last = session.lastInterval || input, deltaTime = input.timeStamp - last.timeStamp, velocity, velocityX, velocityY, direction;\n        if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n            var deltaX = input.deltaX - last.deltaX;\n            var deltaY = input.deltaY - last.deltaY;\n            var v = getVelocity(deltaTime, deltaX, deltaY);\n            velocityX = v.x;\n            velocityY = v.y;\n            velocity = abs(v.x) > abs(v.y) ? v.x : v.y;\n            direction = getDirection(deltaX, deltaY);\n            session.lastInterval = input;\n        } else {\n            // use latest velocity info if it doesn't overtake a minimum period\n            velocity = last.velocity;\n            velocityX = last.velocityX;\n            velocityY = last.velocityY;\n            direction = last.direction;\n        }\n        input.velocity = velocity;\n        input.velocityX = velocityX;\n        input.velocityY = velocityY;\n        input.direction = direction;\n    }\n    /**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */ function simpleCloneInputData(input) {\n        // make a simple copy of the pointers because we will get a reference if we don't\n        // we only need clientXY for the calculations\n        var pointers = [];\n        var i = 0;\n        while(i < input.pointers.length){\n            pointers[i] = {\n                clientX: round(input.pointers[i].clientX),\n                clientY: round(input.pointers[i].clientY)\n            };\n            i++;\n        }\n        return {\n            timeStamp: now(),\n            pointers: pointers,\n            center: getCenter(pointers),\n            deltaX: input.deltaX,\n            deltaY: input.deltaY\n        };\n    }\n    /**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */ function getCenter(pointers) {\n        var pointersLength = pointers.length;\n        // no need to loop when only one touch\n        if (pointersLength === 1) return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n        var x = 0, y = 0, i = 0;\n        while(i < pointersLength){\n            x += pointers[i].clientX;\n            y += pointers[i].clientY;\n            i++;\n        }\n        return {\n            x: round(x / pointersLength),\n            y: round(y / pointersLength)\n        };\n    }\n    /**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */ function getVelocity(deltaTime, x, y) {\n        return {\n            x: x / deltaTime || 0,\n            y: y / deltaTime || 0\n        };\n    }\n    /**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */ function getDirection(x, y) {\n        if (x === y) return DIRECTION_NONE;\n        if (abs(x) >= abs(y)) return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n        return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n    }\n    /**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */ function getDistance(p1, p2, props) {\n        if (!props) props = PROPS_XY;\n        var x = p2[props[0]] - p1[props[0]], y = p2[props[1]] - p1[props[1]];\n        return Math.sqrt(x * x + y * y);\n    }\n    /**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */ function getAngle(p1, p2, props) {\n        if (!props) props = PROPS_XY;\n        var x = p2[props[0]] - p1[props[0]], y = p2[props[1]] - p1[props[1]];\n        return Math.atan2(y, x) * 180 / Math.PI;\n    }\n    /**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */ function getRotation(start, end) {\n        return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n    }\n    /**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */ function getScale(start, end) {\n        return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n    }\n    var MOUSE_INPUT_MAP = {\n        mousedown: INPUT_START,\n        mousemove: INPUT_MOVE,\n        mouseup: INPUT_END\n    };\n    var MOUSE_ELEMENT_EVENTS = \"mousedown\";\n    var MOUSE_WINDOW_EVENTS = \"mousemove mouseup\";\n    /**\n * Mouse events input\n * @constructor\n * @extends Input\n */ function MouseInput() {\n        this.evEl = MOUSE_ELEMENT_EVENTS;\n        this.evWin = MOUSE_WINDOW_EVENTS;\n        this.pressed = false; // mousedown state\n        Input.apply(this, arguments);\n    }\n    inherit(MouseInput, Input, {\n        /**\n     * handle mouse events\n     * @param {Object} ev\n     */ handler: function MEhandler(ev) {\n            var eventType = MOUSE_INPUT_MAP[ev.type];\n            // on start we want to have the left mouse button down\n            if (eventType & INPUT_START && ev.button === 0) this.pressed = true;\n            if (eventType & INPUT_MOVE && ev.which !== 1) eventType = INPUT_END;\n            // mouse must be down\n            if (!this.pressed) return;\n            if (eventType & INPUT_END) this.pressed = false;\n            this.callback(this.manager, eventType, {\n                pointers: [\n                    ev\n                ],\n                changedPointers: [\n                    ev\n                ],\n                pointerType: INPUT_TYPE_MOUSE,\n                srcEvent: ev\n            });\n        }\n    });\n    var POINTER_INPUT_MAP = {\n        pointerdown: INPUT_START,\n        pointermove: INPUT_MOVE,\n        pointerup: INPUT_END,\n        pointercancel: INPUT_CANCEL,\n        pointerout: INPUT_CANCEL\n    };\n    // in IE10 the pointer types is defined as an enum\n    var IE10_POINTER_TYPE_ENUM = {\n        2: INPUT_TYPE_TOUCH,\n        3: INPUT_TYPE_PEN,\n        4: INPUT_TYPE_MOUSE,\n        5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n    };\n    var POINTER_ELEMENT_EVENTS = \"pointerdown\";\n    var POINTER_WINDOW_EVENTS = \"pointermove pointerup pointercancel\";\n    // IE10 has prefixed support, and case-sensitive\n    if (window1.MSPointerEvent && !window1.PointerEvent) {\n        POINTER_ELEMENT_EVENTS = \"MSPointerDown\";\n        POINTER_WINDOW_EVENTS = \"MSPointerMove MSPointerUp MSPointerCancel\";\n    }\n    /**\n * Pointer events input\n * @constructor\n * @extends Input\n */ function PointerEventInput() {\n        this.evEl = POINTER_ELEMENT_EVENTS;\n        this.evWin = POINTER_WINDOW_EVENTS;\n        Input.apply(this, arguments);\n        this.store = this.manager.session.pointerEvents = [];\n    }\n    inherit(PointerEventInput, Input, {\n        /**\n     * handle mouse events\n     * @param {Object} ev\n     */ handler: function PEhandler(ev) {\n            var store = this.store;\n            var removePointer = false;\n            var eventTypeNormalized = ev.type.toLowerCase().replace(\"ms\", \"\");\n            var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n            var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n            var isTouch = pointerType == INPUT_TYPE_TOUCH;\n            // get index of the event in the store\n            var storeIndex = inArray(store, ev.pointerId, \"pointerId\");\n            // start and mouse must be down\n            if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n                if (storeIndex < 0) {\n                    store.push(ev);\n                    storeIndex = store.length - 1;\n                }\n            } else if (eventType & (INPUT_END | INPUT_CANCEL)) removePointer = true;\n            // it not found, so the pointer hasn't been down (so it's probably a hover)\n            if (storeIndex < 0) return;\n            // update the event in the store\n            store[storeIndex] = ev;\n            this.callback(this.manager, eventType, {\n                pointers: store,\n                changedPointers: [\n                    ev\n                ],\n                pointerType: pointerType,\n                srcEvent: ev\n            });\n            if (removePointer) // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    });\n    var SINGLE_TOUCH_INPUT_MAP = {\n        touchstart: INPUT_START,\n        touchmove: INPUT_MOVE,\n        touchend: INPUT_END,\n        touchcancel: INPUT_CANCEL\n    };\n    var SINGLE_TOUCH_TARGET_EVENTS = \"touchstart\";\n    var SINGLE_TOUCH_WINDOW_EVENTS = \"touchstart touchmove touchend touchcancel\";\n    /**\n * Touch events input\n * @constructor\n * @extends Input\n */ function SingleTouchInput() {\n        this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n        this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n        this.started = false;\n        Input.apply(this, arguments);\n    }\n    inherit(SingleTouchInput, Input, {\n        handler: function TEhandler(ev) {\n            var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n            // should we handle the touch events?\n            if (type === INPUT_START) this.started = true;\n            if (!this.started) return;\n            var touches = normalizeSingleTouches.call(this, ev, type);\n            // when done, reset the started state\n            if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) this.started = false;\n            this.callback(this.manager, type, {\n                pointers: touches[0],\n                changedPointers: touches[1],\n                pointerType: INPUT_TYPE_TOUCH,\n                srcEvent: ev\n            });\n        }\n    });\n    /**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */ function normalizeSingleTouches(ev, type) {\n        var all = toArray(ev.touches);\n        var changed = toArray(ev.changedTouches);\n        if (type & (INPUT_END | INPUT_CANCEL)) all = uniqueArray(all.concat(changed), \"identifier\", true);\n        return [\n            all,\n            changed\n        ];\n    }\n    var TOUCH_INPUT_MAP = {\n        touchstart: INPUT_START,\n        touchmove: INPUT_MOVE,\n        touchend: INPUT_END,\n        touchcancel: INPUT_CANCEL\n    };\n    var TOUCH_TARGET_EVENTS = \"touchstart touchmove touchend touchcancel\";\n    /**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */ function TouchInput() {\n        this.evTarget = TOUCH_TARGET_EVENTS;\n        this.targetIds = {};\n        Input.apply(this, arguments);\n    }\n    inherit(TouchInput, Input, {\n        handler: function MTEhandler(ev) {\n            var type = TOUCH_INPUT_MAP[ev.type];\n            var touches = getTouches.call(this, ev, type);\n            if (!touches) return;\n            this.callback(this.manager, type, {\n                pointers: touches[0],\n                changedPointers: touches[1],\n                pointerType: INPUT_TYPE_TOUCH,\n                srcEvent: ev\n            });\n        }\n    });\n    /**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */ function getTouches(ev, type) {\n        var allTouches = toArray(ev.touches);\n        var targetIds = this.targetIds;\n        // when there is only one touch, the process can be simplified\n        if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n            targetIds[allTouches[0].identifier] = true;\n            return [\n                allTouches,\n                allTouches\n            ];\n        }\n        var i, targetTouches, changedTouches = toArray(ev.changedTouches), changedTargetTouches = [], target = this.target;\n        // get target touches from touches\n        targetTouches = allTouches.filter(function(touch) {\n            return hasParent(touch.target, target);\n        });\n        // collect touches\n        if (type === INPUT_START) {\n            i = 0;\n            while(i < targetTouches.length){\n                targetIds[targetTouches[i].identifier] = true;\n                i++;\n            }\n        }\n        // filter changed touches to only contain touches that exist in the collected target ids\n        i = 0;\n        while(i < changedTouches.length){\n            if (targetIds[changedTouches[i].identifier]) changedTargetTouches.push(changedTouches[i]);\n            // cleanup removed touches\n            if (type & (INPUT_END | INPUT_CANCEL)) delete targetIds[changedTouches[i].identifier];\n            i++;\n        }\n        if (!changedTargetTouches.length) return;\n        return [\n            // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n            uniqueArray(targetTouches.concat(changedTargetTouches), \"identifier\", true),\n            changedTargetTouches\n        ];\n    }\n    /**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */ var DEDUP_TIMEOUT = 2500;\n    var DEDUP_DISTANCE = 25;\n    function TouchMouseInput() {\n        Input.apply(this, arguments);\n        var handler = bindFn(this.handler, this);\n        this.touch = new TouchInput(this.manager, handler);\n        this.mouse = new MouseInput(this.manager, handler);\n        this.primaryTouch = null;\n        this.lastTouches = [];\n    }\n    inherit(TouchMouseInput, Input, {\n        /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */ handler: function TMEhandler(manager, inputEvent, inputData) {\n            var isTouch = inputData.pointerType == INPUT_TYPE_TOUCH, isMouse = inputData.pointerType == INPUT_TYPE_MOUSE;\n            if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) return;\n            // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n            if (isTouch) recordTouches.call(this, inputEvent, inputData);\n            else if (isMouse && isSyntheticEvent.call(this, inputData)) return;\n            this.callback(manager, inputEvent, inputData);\n        },\n        /**\n     * remove the event listeners\n     */ destroy: function destroy() {\n            this.touch.destroy();\n            this.mouse.destroy();\n        }\n    });\n    function recordTouches(eventType, eventData) {\n        if (eventType & INPUT_START) {\n            this.primaryTouch = eventData.changedPointers[0].identifier;\n            setLastTouch.call(this, eventData);\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) setLastTouch.call(this, eventData);\n    }\n    function setLastTouch(eventData) {\n        var touch = eventData.changedPointers[0];\n        if (touch.identifier === this.primaryTouch) {\n            var lastTouch = {\n                x: touch.clientX,\n                y: touch.clientY\n            };\n            this.lastTouches.push(lastTouch);\n            var lts = this.lastTouches;\n            var removeLastTouch = function() {\n                var i = lts.indexOf(lastTouch);\n                if (i > -1) lts.splice(i, 1);\n            };\n            setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n        }\n    }\n    function isSyntheticEvent(eventData) {\n        var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n        for(var i = 0; i < this.lastTouches.length; i++){\n            var t = this.lastTouches[i];\n            var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n            if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) return true;\n        }\n        return false;\n    }\n    var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, \"touchAction\");\n    var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n    // magical touchAction value\n    var TOUCH_ACTION_COMPUTE = \"compute\";\n    var TOUCH_ACTION_AUTO = \"auto\";\n    var TOUCH_ACTION_MANIPULATION = \"manipulation\"; // not implemented\n    var TOUCH_ACTION_NONE = \"none\";\n    var TOUCH_ACTION_PAN_X = \"pan-x\";\n    var TOUCH_ACTION_PAN_Y = \"pan-y\";\n    var TOUCH_ACTION_MAP = getTouchActionProps();\n    /**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */ function TouchAction(manager, value) {\n        this.manager = manager;\n        this.set(value);\n    }\n    TouchAction.prototype = {\n        /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */ set: function(value) {\n            // find out the touch-action by the event handlers\n            if (value == TOUCH_ACTION_COMPUTE) value = this.compute();\n            if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n            this.actions = value.toLowerCase().trim();\n        },\n        /**\n     * just re-set the touchAction value\n     */ update: function() {\n            this.set(this.manager.options.touchAction);\n        },\n        /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */ compute: function() {\n            var actions = [];\n            each(this.manager.recognizers, function(recognizer) {\n                if (boolOrFn(recognizer.options.enable, [\n                    recognizer\n                ])) actions = actions.concat(recognizer.getTouchAction());\n            });\n            return cleanTouchActions(actions.join(\" \"));\n        },\n        /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */ preventDefaults: function(input) {\n            var srcEvent = input.srcEvent;\n            var direction = input.offsetDirection;\n            // if the touch action did prevented once this session\n            if (this.manager.session.prevented) {\n                srcEvent.preventDefault();\n                return;\n            }\n            var actions = this.actions;\n            var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n            var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n            var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n            if (hasNone) {\n                //do not prevent defaults if this is a tap gesture\n                var isTapPointer = input.pointers.length === 1;\n                var isTapMovement = input.distance < 2;\n                var isTapTouchTime = input.deltaTime < 250;\n                if (isTapPointer && isTapMovement && isTapTouchTime) return;\n            }\n            if (hasPanX && hasPanY) // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n            if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) return this.preventSrc(srcEvent);\n        },\n        /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */ preventSrc: function(srcEvent) {\n            this.manager.session.prevented = true;\n            srcEvent.preventDefault();\n        }\n    };\n    /**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */ function cleanTouchActions(actions) {\n        // none\n        if (inStr(actions, TOUCH_ACTION_NONE)) return TOUCH_ACTION_NONE;\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n        // if both pan-x and pan-y are set (different recognizers\n        // for different directions, e.g. horizontal pan but vertical swipe?)\n        // we need none (as otherwise with pan-x pan-y combined none of these\n        // recognizers will work, since the browser would handle all panning\n        if (hasPanX && hasPanY) return TOUCH_ACTION_NONE;\n        // pan-x OR pan-y\n        if (hasPanX || hasPanY) return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n        // manipulation\n        if (inStr(actions, TOUCH_ACTION_MANIPULATION)) return TOUCH_ACTION_MANIPULATION;\n        return TOUCH_ACTION_AUTO;\n    }\n    function getTouchActionProps() {\n        if (!NATIVE_TOUCH_ACTION) return false;\n        var touchMap = {};\n        var cssSupports = window1.CSS && window1.CSS.supports;\n        [\n            \"auto\",\n            \"manipulation\",\n            \"pan-y\",\n            \"pan-x\",\n            \"pan-x pan-y\",\n            \"none\"\n        ].forEach(function(val) {\n            // If css.supports is not supported but there is native touch-action assume it supports\n            // all values. This is the case for IE 10 and 11.\n            touchMap[val] = cssSupports ? window1.CSS.supports(\"touch-action\", val) : true;\n        });\n        return touchMap;\n    }\n    /**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */ var STATE_POSSIBLE = 1;\n    var STATE_BEGAN = 2;\n    var STATE_CHANGED = 4;\n    var STATE_ENDED = 8;\n    var STATE_RECOGNIZED = STATE_ENDED;\n    var STATE_CANCELLED = 16;\n    var STATE_FAILED = 32;\n    /**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */ function Recognizer(options) {\n        this.options = assign({}, this.defaults, options || {});\n        this.id = uniqueId();\n        this.manager = null;\n        // default is enable true\n        this.options.enable = ifUndefined(this.options.enable, true);\n        this.state = STATE_POSSIBLE;\n        this.simultaneous = {};\n        this.requireFail = [];\n    }\n    Recognizer.prototype = {\n        /**\n     * @virtual\n     * @type {Object}\n     */ defaults: {},\n        /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */ set: function(options) {\n            assign(this.options, options);\n            // also update the touchAction, in case something changed about the directions/enabled state\n            this.manager && this.manager.touchAction.update();\n            return this;\n        },\n        /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */ recognizeWith: function(otherRecognizer) {\n            if (invokeArrayArg(otherRecognizer, \"recognizeWith\", this)) return this;\n            var simultaneous = this.simultaneous;\n            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n            if (!simultaneous[otherRecognizer.id]) {\n                simultaneous[otherRecognizer.id] = otherRecognizer;\n                otherRecognizer.recognizeWith(this);\n            }\n            return this;\n        },\n        /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */ dropRecognizeWith: function(otherRecognizer) {\n            if (invokeArrayArg(otherRecognizer, \"dropRecognizeWith\", this)) return this;\n            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n            delete this.simultaneous[otherRecognizer.id];\n            return this;\n        },\n        /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */ requireFailure: function(otherRecognizer) {\n            if (invokeArrayArg(otherRecognizer, \"requireFailure\", this)) return this;\n            var requireFail = this.requireFail;\n            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n            if (inArray(requireFail, otherRecognizer) === -1) {\n                requireFail.push(otherRecognizer);\n                otherRecognizer.requireFailure(this);\n            }\n            return this;\n        },\n        /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */ dropRequireFailure: function(otherRecognizer) {\n            if (invokeArrayArg(otherRecognizer, \"dropRequireFailure\", this)) return this;\n            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n            var index = inArray(this.requireFail, otherRecognizer);\n            if (index > -1) this.requireFail.splice(index, 1);\n            return this;\n        },\n        /**\n     * has require failures boolean\n     * @returns {boolean}\n     */ hasRequireFailures: function() {\n            return this.requireFail.length > 0;\n        },\n        /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */ canRecognizeWith: function(otherRecognizer) {\n            return !!this.simultaneous[otherRecognizer.id];\n        },\n        /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */ emit: function(input) {\n            var self1 = this;\n            var state = this.state;\n            function emit(event) {\n                self1.manager.emit(event, input);\n            }\n            // 'panstart' and 'panmove'\n            if (state < STATE_ENDED) emit(self1.options.event + stateStr(state));\n            emit(self1.options.event); // simple 'eventName' events\n            if (input.additionalEvent) emit(input.additionalEvent);\n            // panend and pancancel\n            if (state >= STATE_ENDED) emit(self1.options.event + stateStr(state));\n        },\n        /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */ tryEmit: function(input) {\n            if (this.canEmit()) return this.emit(input);\n            // it's failing anyway\n            this.state = STATE_FAILED;\n        },\n        /**\n     * can we emit?\n     * @returns {boolean}\n     */ canEmit: function() {\n            var i = 0;\n            while(i < this.requireFail.length){\n                if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) return false;\n                i++;\n            }\n            return true;\n        },\n        /**\n     * update the recognizer\n     * @param {Object} inputData\n     */ recognize: function(inputData) {\n            // make a new copy of the inputData\n            // so we can change the inputData without messing up the other recognizers\n            var inputDataClone = assign({}, inputData);\n            // is is enabled and allow recognizing?\n            if (!boolOrFn(this.options.enable, [\n                this,\n                inputDataClone\n            ])) {\n                this.reset();\n                this.state = STATE_FAILED;\n                return;\n            }\n            // reset when we've reached the end\n            if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) this.state = STATE_POSSIBLE;\n            this.state = this.process(inputDataClone);\n            // the recognizer has recognized a gesture\n            // so trigger an event\n            if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) this.tryEmit(inputDataClone);\n        },\n        /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */ process: function(inputData) {},\n        /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */ getTouchAction: function() {},\n        /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */ reset: function() {}\n    };\n    /**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */ function stateStr(state) {\n        if (state & STATE_CANCELLED) return \"cancel\";\n        else if (state & STATE_ENDED) return \"end\";\n        else if (state & STATE_CHANGED) return \"move\";\n        else if (state & STATE_BEGAN) return \"start\";\n        return \"\";\n    }\n    /**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */ function directionStr(direction) {\n        if (direction == DIRECTION_DOWN) return \"down\";\n        else if (direction == DIRECTION_UP) return \"up\";\n        else if (direction == DIRECTION_LEFT) return \"left\";\n        else if (direction == DIRECTION_RIGHT) return \"right\";\n        return \"\";\n    }\n    /**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */ function getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n        var manager = recognizer.manager;\n        if (manager) return manager.get(otherRecognizer);\n        return otherRecognizer;\n    }\n    /**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */ function AttrRecognizer() {\n        Recognizer.apply(this, arguments);\n    }\n    inherit(AttrRecognizer, Recognizer, {\n        /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */ defaults: {\n            /**\n         * @type {Number}\n         * @default 1\n         */ pointers: 1\n        },\n        /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */ attrTest: function(input) {\n            var optionPointers = this.options.pointers;\n            return optionPointers === 0 || input.pointers.length === optionPointers;\n        },\n        /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */ process: function(input) {\n            var state = this.state;\n            var eventType = input.eventType;\n            var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n            var isValid = this.attrTest(input);\n            // on cancel input and we've recognized before, return STATE_CANCELLED\n            if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) return state | STATE_CANCELLED;\n            else if (isRecognized || isValid) {\n                if (eventType & INPUT_END) return state | STATE_ENDED;\n                else if (!(state & STATE_BEGAN)) return STATE_BEGAN;\n                return state | STATE_CHANGED;\n            }\n            return STATE_FAILED;\n        }\n    });\n    /**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */ function PanRecognizer() {\n        AttrRecognizer.apply(this, arguments);\n        this.pX = null;\n        this.pY = null;\n    }\n    inherit(PanRecognizer, AttrRecognizer, {\n        /**\n     * @namespace\n     * @memberof PanRecognizer\n     */ defaults: {\n            event: \"pan\",\n            threshold: 10,\n            pointers: 1,\n            direction: DIRECTION_ALL\n        },\n        getTouchAction: function() {\n            var direction = this.options.direction;\n            var actions = [];\n            if (direction & DIRECTION_HORIZONTAL) actions.push(TOUCH_ACTION_PAN_Y);\n            if (direction & DIRECTION_VERTICAL) actions.push(TOUCH_ACTION_PAN_X);\n            return actions;\n        },\n        directionTest: function(input) {\n            var options = this.options;\n            var hasMoved = true;\n            var distance = input.distance;\n            var direction = input.direction;\n            var x = input.deltaX;\n            var y = input.deltaY;\n            // lock to axis?\n            if (!(direction & options.direction)) {\n                if (options.direction & DIRECTION_HORIZONTAL) {\n                    direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                    hasMoved = x != this.pX;\n                    distance = Math.abs(input.deltaX);\n                } else {\n                    direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n                    hasMoved = y != this.pY;\n                    distance = Math.abs(input.deltaY);\n                }\n            }\n            input.direction = direction;\n            return hasMoved && distance > options.threshold && direction & options.direction;\n        },\n        attrTest: function(input) {\n            return AttrRecognizer.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));\n        },\n        emit: function(input) {\n            this.pX = input.deltaX;\n            this.pY = input.deltaY;\n            var direction = directionStr(input.direction);\n            if (direction) input.additionalEvent = this.options.event + direction;\n            this._super.emit.call(this, input);\n        }\n    });\n    /**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */ function PinchRecognizer() {\n        AttrRecognizer.apply(this, arguments);\n    }\n    inherit(PinchRecognizer, AttrRecognizer, {\n        /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */ defaults: {\n            event: \"pinch\",\n            threshold: 0,\n            pointers: 2\n        },\n        getTouchAction: function() {\n            return [\n                TOUCH_ACTION_NONE\n            ];\n        },\n        attrTest: function(input) {\n            return this._super.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n        },\n        emit: function(input) {\n            if (input.scale !== 1) {\n                var inOut = input.scale < 1 ? \"in\" : \"out\";\n                input.additionalEvent = this.options.event + inOut;\n            }\n            this._super.emit.call(this, input);\n        }\n    });\n    /**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */ function PressRecognizer() {\n        Recognizer.apply(this, arguments);\n        this._timer = null;\n        this._input = null;\n    }\n    inherit(PressRecognizer, Recognizer, {\n        /**\n     * @namespace\n     * @memberof PressRecognizer\n     */ defaults: {\n            event: \"press\",\n            pointers: 1,\n            time: 251,\n            threshold: 9 // a minimal movement is ok, but keep it low\n        },\n        getTouchAction: function() {\n            return [\n                TOUCH_ACTION_AUTO\n            ];\n        },\n        process: function(input) {\n            var options = this.options;\n            var validPointers = input.pointers.length === options.pointers;\n            var validMovement = input.distance < options.threshold;\n            var validTime = input.deltaTime > options.time;\n            this._input = input;\n            // we only allow little movement\n            // and we've reached an end event, so a tap is possible\n            if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) this.reset();\n            else if (input.eventType & INPUT_START) {\n                this.reset();\n                this._timer = setTimeoutContext(function() {\n                    this.state = STATE_RECOGNIZED;\n                    this.tryEmit();\n                }, options.time, this);\n            } else if (input.eventType & INPUT_END) return STATE_RECOGNIZED;\n            return STATE_FAILED;\n        },\n        reset: function() {\n            clearTimeout(this._timer);\n        },\n        emit: function(input) {\n            if (this.state !== STATE_RECOGNIZED) return;\n            if (input && input.eventType & INPUT_END) this.manager.emit(this.options.event + \"up\", input);\n            else {\n                this._input.timeStamp = now();\n                this.manager.emit(this.options.event, this._input);\n            }\n        }\n    });\n    /**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */ function RotateRecognizer() {\n        AttrRecognizer.apply(this, arguments);\n    }\n    inherit(RotateRecognizer, AttrRecognizer, {\n        /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */ defaults: {\n            event: \"rotate\",\n            threshold: 0,\n            pointers: 2\n        },\n        getTouchAction: function() {\n            return [\n                TOUCH_ACTION_NONE\n            ];\n        },\n        attrTest: function(input) {\n            return this._super.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n        }\n    });\n    /**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */ function SwipeRecognizer() {\n        AttrRecognizer.apply(this, arguments);\n    }\n    inherit(SwipeRecognizer, AttrRecognizer, {\n        /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */ defaults: {\n            event: \"swipe\",\n            threshold: 10,\n            velocity: 0.3,\n            direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n            pointers: 1\n        },\n        getTouchAction: function() {\n            return PanRecognizer.prototype.getTouchAction.call(this);\n        },\n        attrTest: function(input) {\n            var direction = this.options.direction;\n            var velocity;\n            if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) velocity = input.overallVelocity;\n            else if (direction & DIRECTION_HORIZONTAL) velocity = input.overallVelocityX;\n            else if (direction & DIRECTION_VERTICAL) velocity = input.overallVelocityY;\n            return this._super.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers == this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n        },\n        emit: function(input) {\n            var direction = directionStr(input.offsetDirection);\n            if (direction) this.manager.emit(this.options.event + direction, input);\n            this.manager.emit(this.options.event, input);\n        }\n    });\n    /**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */ function TapRecognizer() {\n        Recognizer.apply(this, arguments);\n        // previous time and center,\n        // used for tap counting\n        this.pTime = false;\n        this.pCenter = false;\n        this._timer = null;\n        this._input = null;\n        this.count = 0;\n    }\n    inherit(TapRecognizer, Recognizer, {\n        /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */ defaults: {\n            event: \"tap\",\n            pointers: 1,\n            taps: 1,\n            interval: 300,\n            time: 250,\n            threshold: 9,\n            posThreshold: 10 // a multi-tap can be a bit off the initial position\n        },\n        getTouchAction: function() {\n            return [\n                TOUCH_ACTION_MANIPULATION\n            ];\n        },\n        process: function(input) {\n            var options = this.options;\n            var validPointers = input.pointers.length === options.pointers;\n            var validMovement = input.distance < options.threshold;\n            var validTouchTime = input.deltaTime < options.time;\n            this.reset();\n            if (input.eventType & INPUT_START && this.count === 0) return this.failTimeout();\n            // we only allow little movement\n            // and we've reached an end event, so a tap is possible\n            if (validMovement && validTouchTime && validPointers) {\n                if (input.eventType != INPUT_END) return this.failTimeout();\n                var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;\n                var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n                this.pTime = input.timeStamp;\n                this.pCenter = input.center;\n                if (!validMultiTap || !validInterval) this.count = 1;\n                else this.count += 1;\n                this._input = input;\n                // if tap count matches we have recognized it,\n                // else it has began recognizing...\n                var tapCount = this.count % options.taps;\n                if (tapCount === 0) {\n                    // no failing requirements, immediately trigger the tap event\n                    // or wait as long as the multitap interval to trigger\n                    if (!this.hasRequireFailures()) return STATE_RECOGNIZED;\n                    else {\n                        this._timer = setTimeoutContext(function() {\n                            this.state = STATE_RECOGNIZED;\n                            this.tryEmit();\n                        }, options.interval, this);\n                        return STATE_BEGAN;\n                    }\n                }\n            }\n            return STATE_FAILED;\n        },\n        failTimeout: function() {\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_FAILED;\n            }, this.options.interval, this);\n            return STATE_FAILED;\n        },\n        reset: function() {\n            clearTimeout(this._timer);\n        },\n        emit: function() {\n            if (this.state == STATE_RECOGNIZED) {\n                this._input.tapCount = this.count;\n                this.manager.emit(this.options.event, this._input);\n            }\n        }\n    });\n    /**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */ function Hammer(element, options) {\n        options = options || {};\n        options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n        return new Manager(element, options);\n    }\n    /**\n * @const {string}\n */ Hammer.VERSION = \"2.0.7\";\n    /**\n * default settings\n * @namespace\n */ Hammer.defaults = {\n        /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */ domEvents: false,\n        /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */ touchAction: TOUCH_ACTION_COMPUTE,\n        /**\n     * @type {Boolean}\n     * @default true\n     */ enable: true,\n        /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */ inputTarget: null,\n        /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */ inputClass: null,\n        /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */ preset: [\n            // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n            [\n                RotateRecognizer,\n                {\n                    enable: false\n                }\n            ],\n            [\n                PinchRecognizer,\n                {\n                    enable: false\n                },\n                [\n                    \"rotate\"\n                ]\n            ],\n            [\n                SwipeRecognizer,\n                {\n                    direction: DIRECTION_HORIZONTAL\n                }\n            ],\n            [\n                PanRecognizer,\n                {\n                    direction: DIRECTION_HORIZONTAL\n                },\n                [\n                    \"swipe\"\n                ]\n            ],\n            [\n                TapRecognizer\n            ],\n            [\n                TapRecognizer,\n                {\n                    event: \"doubletap\",\n                    taps: 2\n                },\n                [\n                    \"tap\"\n                ]\n            ],\n            [\n                PressRecognizer\n            ]\n        ],\n        /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */ cssProps: {\n            /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */ userSelect: \"none\",\n            /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */ touchSelect: \"none\",\n            /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */ touchCallout: \"none\",\n            /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */ contentZooming: \"none\",\n            /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */ userDrag: \"none\",\n            /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */ tapHighlightColor: \"rgba(0,0,0,0)\"\n        }\n    };\n    var STOP = 1;\n    var FORCED_STOP = 2;\n    /**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */ function Manager(element, options) {\n        this.options = assign({}, Hammer.defaults, options || {});\n        this.options.inputTarget = this.options.inputTarget || element;\n        this.handlers = {};\n        this.session = {};\n        this.recognizers = [];\n        this.oldCssProps = {};\n        this.element = element;\n        this.input = createInputInstance(this);\n        this.touchAction = new TouchAction(this, this.options.touchAction);\n        toggleCssProps(this, true);\n        each(this.options.recognizers, function(item) {\n            var recognizer = this.add(new item[0](item[1]));\n            item[2] && recognizer.recognizeWith(item[2]);\n            item[3] && recognizer.requireFailure(item[3]);\n        }, this);\n    }\n    Manager.prototype = {\n        /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */ set: function(options) {\n            assign(this.options, options);\n            // Options that need a little more setup\n            if (options.touchAction) this.touchAction.update();\n            if (options.inputTarget) {\n                // Clean up existing event listeners and reinitialize\n                this.input.destroy();\n                this.input.target = options.inputTarget;\n                this.input.init();\n            }\n            return this;\n        },\n        /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */ stop: function(force) {\n            this.session.stopped = force ? FORCED_STOP : STOP;\n        },\n        /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */ recognize: function(inputData) {\n            var session = this.session;\n            if (session.stopped) return;\n            // run the touch-action polyfill\n            this.touchAction.preventDefaults(inputData);\n            var recognizer;\n            var recognizers = this.recognizers;\n            // this holds the recognizer that is being recognized.\n            // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n            // if no recognizer is detecting a thing, it is set to `null`\n            var curRecognizer = session.curRecognizer;\n            // reset when the last recognizer is recognized\n            // or when we're in a new session\n            if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) curRecognizer = session.curRecognizer = null;\n            var i = 0;\n            while(i < recognizers.length){\n                recognizer = recognizers[i];\n                // find out if we are allowed try to recognize the input for this one.\n                // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n                // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n                //      that is being recognized.\n                // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n                //      this can be setup with the `recognizeWith()` method on the recognizer.\n                if (session.stopped !== FORCED_STOP && (!curRecognizer || recognizer == curRecognizer || // 2\n                recognizer.canRecognizeWith(curRecognizer))) recognizer.recognize(inputData);\n                else recognizer.reset();\n                // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n                // current active recognizer. but only if we don't already have an active recognizer\n                if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) curRecognizer = session.curRecognizer = recognizer;\n                i++;\n            }\n        },\n        /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */ get: function(recognizer) {\n            if (recognizer instanceof Recognizer) return recognizer;\n            var recognizers = this.recognizers;\n            for(var i = 0; i < recognizers.length; i++){\n                if (recognizers[i].options.event == recognizer) return recognizers[i];\n            }\n            return null;\n        },\n        /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */ add: function(recognizer) {\n            if (invokeArrayArg(recognizer, \"add\", this)) return this;\n            // remove existing\n            var existing = this.get(recognizer.options.event);\n            if (existing) this.remove(existing);\n            this.recognizers.push(recognizer);\n            recognizer.manager = this;\n            this.touchAction.update();\n            return recognizer;\n        },\n        /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */ remove: function(recognizer) {\n            if (invokeArrayArg(recognizer, \"remove\", this)) return this;\n            recognizer = this.get(recognizer);\n            // let's make sure this recognizer exists\n            if (recognizer) {\n                var recognizers = this.recognizers;\n                var index = inArray(recognizers, recognizer);\n                if (index !== -1) {\n                    recognizers.splice(index, 1);\n                    this.touchAction.update();\n                }\n            }\n            return this;\n        },\n        /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */ on: function(events, handler) {\n            if (events === undefined) return;\n            if (handler === undefined) return;\n            var handlers = this.handlers;\n            each(splitStr(events), function(event) {\n                handlers[event] = handlers[event] || [];\n                handlers[event].push(handler);\n            });\n            return this;\n        },\n        /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */ off: function(events, handler) {\n            if (events === undefined) return;\n            var handlers = this.handlers;\n            each(splitStr(events), function(event) {\n                if (!handler) delete handlers[event];\n                else handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            });\n            return this;\n        },\n        /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */ emit: function(event, data) {\n            // we also want to trigger dom events\n            if (this.options.domEvents) triggerDomEvent(event, data);\n            // no handlers, so skip it all\n            var handlers = this.handlers[event] && this.handlers[event].slice();\n            if (!handlers || !handlers.length) return;\n            data.type = event;\n            data.preventDefault = function() {\n                data.srcEvent.preventDefault();\n            };\n            var i = 0;\n            while(i < handlers.length){\n                handlers[i](data);\n                i++;\n            }\n        },\n        /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */ destroy: function() {\n            this.element && toggleCssProps(this, false);\n            this.handlers = {};\n            this.session = {};\n            this.input.destroy();\n            this.element = null;\n        }\n    };\n    /**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */ function toggleCssProps(manager, add) {\n        var element = manager.element;\n        if (!element.style) return;\n        var prop;\n        each(manager.options.cssProps, function(value, name) {\n            prop = prefixed(element.style, name);\n            if (add) {\n                manager.oldCssProps[prop] = element.style[prop];\n                element.style[prop] = value;\n            } else element.style[prop] = manager.oldCssProps[prop] || \"\";\n        });\n        if (!add) manager.oldCssProps = {};\n    }\n    /**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */ function triggerDomEvent(event, data) {\n        var gestureEvent = document1.createEvent(\"Event\");\n        gestureEvent.initEvent(event, true, true);\n        gestureEvent.gesture = data;\n        data.target.dispatchEvent(gestureEvent);\n    }\n    assign(Hammer, {\n        INPUT_START: INPUT_START,\n        INPUT_MOVE: INPUT_MOVE,\n        INPUT_END: INPUT_END,\n        INPUT_CANCEL: INPUT_CANCEL,\n        STATE_POSSIBLE: STATE_POSSIBLE,\n        STATE_BEGAN: STATE_BEGAN,\n        STATE_CHANGED: STATE_CHANGED,\n        STATE_ENDED: STATE_ENDED,\n        STATE_RECOGNIZED: STATE_RECOGNIZED,\n        STATE_CANCELLED: STATE_CANCELLED,\n        STATE_FAILED: STATE_FAILED,\n        DIRECTION_NONE: DIRECTION_NONE,\n        DIRECTION_LEFT: DIRECTION_LEFT,\n        DIRECTION_RIGHT: DIRECTION_RIGHT,\n        DIRECTION_UP: DIRECTION_UP,\n        DIRECTION_DOWN: DIRECTION_DOWN,\n        DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n        DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n        DIRECTION_ALL: DIRECTION_ALL,\n        Manager: Manager,\n        Input: Input,\n        TouchAction: TouchAction,\n        TouchInput: TouchInput,\n        MouseInput: MouseInput,\n        PointerEventInput: PointerEventInput,\n        TouchMouseInput: TouchMouseInput,\n        SingleTouchInput: SingleTouchInput,\n        Recognizer: Recognizer,\n        AttrRecognizer: AttrRecognizer,\n        Tap: TapRecognizer,\n        Pan: PanRecognizer,\n        Swipe: SwipeRecognizer,\n        Pinch: PinchRecognizer,\n        Rotate: RotateRecognizer,\n        Press: PressRecognizer,\n        on: addEventListeners,\n        off: removeEventListeners,\n        each: each,\n        merge: merge,\n        extend: extend,\n        assign: assign,\n        inherit: inherit,\n        bindFn: bindFn,\n        prefixed: prefixed\n    });\n    // this prevents errors when Hammer is loaded in the presence of an AMD\n    //  style loader but by script tag, not by the loader.\n    var freeGlobal = typeof window1 !== \"undefined\" ? window1 : typeof self !== \"undefined\" ? self : {}; // jshint ignore:line\n    freeGlobal.Hammer = Hammer;\n    if (typeof define === \"function\" && define.amd) define(function() {\n        return Hammer;\n    });\n    else if (0, $0d122d992128478a$exports) $0d122d992128478a$exports = Hammer;\n    else window1[exportName] = Hammer;\n})(window, document, \"Hammer\");\n\n\n\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n/* eslint-disable no-console */ \"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.initialState = initialState;\n        this.board = JSON.parse(JSON.stringify(initialState));\n        this.previousBoard = JSON.parse(JSON.stringify(initialState));\n        this.status = \"idle\";\n        this.score = 0;\n    // eslint-disable-next-line no-console\n    }\n    savePreviousState() {\n        this.previousBoard = JSON.parse(JSON.stringify(this.board));\n    }\n    getMovedCells() {\n        const movedCells = [];\n        for(let row = 0; row < this.board.length; row++){\n            for(let col = 0; col < this.board[row].length; col++)if (this.board[row][col] !== this.previousBoard[row][col]) movedCells.push({\n                row: row,\n                col: col\n            });\n        }\n        return movedCells;\n    }\n    moveLeft() {\n        this.savePreviousState();\n        for(let row = 0; row < this.board.length; row++){\n            const currentRow = [];\n            for(let col = 0; col < this.board[row].length; col++)if (this.board[row][col] !== 0) currentRow.push(this.board[row][col]);\n            while(currentRow.length < this.board[row].length)currentRow.push(0);\n            for(let col = 0; col < this.board[row].length; col++)this.board[row][col] = currentRow[col];\n            for(let col = 0; col < this.board[row].length - 1; col++)if (this.board[row][col] === this.board[row][col + 1] && this.board[row][col] !== 0) {\n                this.board[row][col] *= 2;\n                this.board[row][col + 1] = 0;\n            }\n            const newRow = [];\n            for(let col = 0; col < this.board[row].length; col++)if (this.board[row][col] !== 0) newRow.push(this.board[row][col]);\n            while(newRow.length < this.board[row].length)newRow.push(0);\n            for(let col = 0; col < this.board[row].length; col++)this.board[row][col] = newRow[col];\n        }\n        this.updateTable();\n        this.getRandomCellNumber();\n        this.updateTable();\n    }\n    moveRight() {\n        this.savePreviousState();\n        for(let row = 0; row < this.board.length; row++){\n            const currentRow = [];\n            for(let col = 0; col < this.board[row].length; col++)if (this.board[row][col] !== 0) currentRow.push(this.board[row][col]);\n            while(currentRow.length < this.board[row].length)currentRow.unshift(0);\n            for(let col = 0; col < this.board[row].length; col++)this.board[row][col] = currentRow[col];\n            for(let col = this.board[row].length - 1; col > 0; col--)if (this.board[row][col] === this.board[row][col - 1] && this.board[row][col] !== 0) {\n                this.board[row][col] *= 2;\n                this.board[row][col - 1] = 0;\n            }\n            const newRow = [];\n            for(let col = 0; col < this.board[row].length; col++)if (this.board[row][col] !== 0) newRow.push(this.board[row][col]);\n            while(newRow.length < this.board[row].length)newRow.unshift(0);\n            for(let col = 0; col < this.board[row].length; col++)this.board[row][col] = newRow[col];\n        }\n        this.updateTable();\n        this.getRandomCellNumber();\n        this.updateTable();\n    }\n    moveUp() {\n        this.savePreviousState();\n        for(let col = 0; col < this.board[0].length; col++){\n            const column = [];\n            for(let row = 0; row < this.board.length; row++)if (this.board[row][col] !== 0) column.push(this.board[row][col]);\n            while(column.length < this.board.length)column.push(0);\n            for(let row = 0; row < this.board.length; row++)this.board[row][col] = column[row];\n            for(let row = 0; row < this.board.length - 1; row++)if (this.board[row][col] === this.board[row + 1][col] && this.board[row][col] !== 0) {\n                this.board[row][col] *= 2;\n                this.board[row + 1][col] = 0;\n            }\n            const newColumn = [];\n            for(let row = 0; row < this.board.length; row++)if (this.board[row][col] !== 0) newColumn.push(this.board[row][col]);\n            while(newColumn.length < this.board.length)newColumn.push(0);\n            for(let row = 0; row < this.board.length; row++)this.board[row][col] = newColumn[row];\n        }\n        this.updateTable();\n        this.getRandomCellNumber();\n        this.updateTable();\n    }\n    moveDown() {\n        this.savePreviousState();\n        for(let col = 0; col < this.board[0].length; col++){\n            const column = [];\n            for(let row = 0; row < this.board.length; row++)if (this.board[row][col] !== 0) column.push(this.board[row][col]);\n            while(column.length < this.board.length)column.unshift(0);\n            for(let row = 0; row < this.board.length; row++)this.board[row][col] = column[row];\n            for(let row = this.board.length - 1; row > 0; row--)if (this.board[row][col] === this.board[row - 1][col] && this.board[row][col] !== 0) {\n                this.board[row][col] *= 2;\n                this.board[row - 1][col] = 0;\n            }\n            const newColumn = [];\n            for(let row = 0; row < this.board.length; row++)if (this.board[row][col] !== 0) newColumn.push(this.board[row][col]);\n            while(newColumn.length < this.board.length)newColumn.unshift(0);\n            for(let row = 0; row < this.board.length; row++)this.board[row][col] = newColumn[row];\n        }\n        this.updateTable();\n        this.getRandomCellNumber();\n        this.updateTable();\n    }\n    getScore() {}\n    getState() {\n        return this.board;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = \"playing\";\n    }\n    restart() {\n        this.status = \"idle\";\n        this.board = JSON.parse(JSON.stringify(this.initialState));\n    }\n    updateTable() {\n        const table = document.querySelector(\"tbody\");\n        Array.from(table.rows).forEach((row, rowIndex)=>{\n            Array.from(row.cells).forEach((cell, cellIndex)=>{\n                const value = this.board[rowIndex][cellIndex];\n                cell.textContent = value !== 0 ? value : \"\";\n            });\n        });\n    }\n    getRandomCellNumber() {\n        const emptyCells = [];\n        for(let row = 0; row < this.board.length; row++){\n            for(let col = 0; col < this.board[row].length; col++)if (this.board[row][col] === 0) emptyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        if (emptyCells.length > 0) {\n            const { row: randomRow, col: randomCol } = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            const randomChance = Math.random();\n            this.board[randomRow][randomCol] = randomChance < 0.1 ? 4 : 2;\n        }\n    }\n    canMoveUp() {\n        for(let row = 1; row < this.board.length; row++)for(let col = 0; col < this.board[row].length; col++){\n            if (this.board[row][col] !== 0 && (this.board[row - 1][col] === 0 || this.board[row - 1][col] === this.board[row][col])) return true;\n        }\n        return false;\n    }\n    canMoveDown() {\n        for(let row = 0; row < this.board.length - 1; row++)for(let col = 0; col < this.board[row].length; col++){\n            if (this.board[row][col] !== 0 && (this.board[row + 1][col] === 0 || this.board[row + 1][col] === this.board[row][col])) return true;\n        }\n        return false;\n    }\n    canMoveLeft() {\n        for(let row = 0; row < this.board.length; row++)for(let col = 1; col < this.board[row].length; col++){\n            if (this.board[row][col] !== 0 && (this.board[row][col - 1] === 0 || this.board[row][col - 1] === this.board[row][col])) return true;\n        }\n        return false;\n    }\n    canMoveRight() {\n        for(let row = 0; row < this.board.length; row++)for(let col = 0; col < this.board[row].length - 1; col++){\n            if (this.board[row][col] !== 0 && (this.board[row][col + 1] === 0 || this.board[row][col + 1] === this.board[row][col])) return true;\n        }\n        return false;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$table = document.querySelector(\"tbody\");\nlet $09e991522ca7e64e$var$boardState = $09e991522ca7e64e$var$game.getState();\nconst $09e991522ca7e64e$var$gameScoreText = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$gameScoreRecordText = document.querySelector(\".record\");\nlet $09e991522ca7e64e$var$gameScore = 0;\nlet $09e991522ca7e64e$var$highScore = parseInt(localStorage.getItem(\"highScore\")) || 0;\n$09e991522ca7e64e$var$gameScoreRecordText.textContent = $09e991522ca7e64e$var$highScore;\nconsole.log($09e991522ca7e64e$var$game.getStatus());\nconst $09e991522ca7e64e$var$displayText = ()=>{\n    $09e991522ca7e64e$var$gameScore = 0;\n    Array.from($09e991522ca7e64e$var$table.rows).forEach((row)=>{\n        Array.from(row.cells).forEach((cell)=>{\n            const cellValue = parseFloat(cell.textContent) || 0;\n            $09e991522ca7e64e$var$gameScore += cellValue;\n        });\n    });\n    $09e991522ca7e64e$var$gameScoreText.textContent = `${$09e991522ca7e64e$var$gameScore}`;\n    if ($09e991522ca7e64e$var$gameScore > $09e991522ca7e64e$var$highScore) {\n        $09e991522ca7e64e$var$highScore = $09e991522ca7e64e$var$gameScore;\n        localStorage.setItem(\"highScore\", $09e991522ca7e64e$var$highScore);\n        $09e991522ca7e64e$var$gameScoreRecordText.textContent = $09e991522ca7e64e$var$highScore;\n    }\n};\nconst $09e991522ca7e64e$var$startGameBoard = ()=>{\n    const randomRow1 = Math.floor(Math.random() * $09e991522ca7e64e$var$boardState.length);\n    const randomCol1 = Math.floor(Math.random() * $09e991522ca7e64e$var$boardState[randomRow1].length);\n    const randomChance1 = Math.random();\n    const randomValue1 = randomChance1 < 0.1 ? 4 : 2;\n    let randomRow2, randomCol2, randomValue2;\n    let positionIsSame = true;\n    do {\n        randomRow2 = Math.floor(Math.random() * $09e991522ca7e64e$var$boardState.length);\n        randomCol2 = Math.floor(Math.random() * $09e991522ca7e64e$var$boardState[randomRow2].length);\n        const randomChance2 = Math.random();\n        randomValue2 = randomChance2 < 0.1 ? 4 : 2;\n        positionIsSame = randomRow1 === randomRow2 && randomCol1 === randomCol2;\n    }while (positionIsSame);\n    $09e991522ca7e64e$var$boardState[randomRow1][randomCol1] = randomValue1;\n    $09e991522ca7e64e$var$boardState[randomRow2][randomCol2] = randomValue2;\n};\nconst $09e991522ca7e64e$var$renderDom = (direction)=>{\n    Array.from($09e991522ca7e64e$var$table.rows).forEach((row)=>{\n        Array.from(row.cells).forEach((cell)=>{\n            cell.textContent = \"\";\n            cell.classList.remove(...cell.classList);\n            cell.classList.add(\"field-cell\");\n        });\n    });\n    const movedCells = $09e991522ca7e64e$var$game.getMovedCells();\n    Array.from($09e991522ca7e64e$var$table.rows).forEach((row, rowIndex)=>{\n        Array.from(row.cells).forEach((cell, cellIndex)=>{\n            const value = $09e991522ca7e64e$var$boardState[rowIndex][cellIndex];\n            if (value !== 0) {\n                cell.textContent = value;\n                cell.classList.add(`field-cell--${value}`);\n                const isMoved = movedCells.some((movedCell)=>movedCell.row === rowIndex && movedCell.col === cellIndex);\n                if (isMoved && direction) cell.classList.add(`field-cell-moving-${direction}`);\n            }\n            setTimeout(()=>{\n                if (direction) cell.classList.remove(`field-cell-moving-${direction}`);\n            }, 100);\n        });\n    });\n};\nconst $09e991522ca7e64e$var$startGame = ()=>{\n    $09e991522ca7e64e$var$startGameBoard();\n    $09e991522ca7e64e$var$renderDom();\n};\nconst $09e991522ca7e64e$var$buttonStart = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$restart = ()=>{\n    $09e991522ca7e64e$var$game.status = \"idle\";\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$boardState = $09e991522ca7e64e$var$game.getState();\n    $09e991522ca7e64e$var$gameScore = 0;\n    $09e991522ca7e64e$var$gameScoreText.textContent = \"0\";\n    $09e991522ca7e64e$var$renderDom();\n    $09e991522ca7e64e$var$buttonStart.textContent = \"Start\";\n    $09e991522ca7e64e$var$buttonStart.classList.remove(\"restart\");\n    $09e991522ca7e64e$var$buttonStart.classList.add(\"start\");\n};\nconst $09e991522ca7e64e$var$iWin = ()=>{\n    let isWin = false;\n    Array.from($09e991522ca7e64e$var$table.rows).forEach((row, rowIndex)=>{\n        Array.from(row.cells).forEach((cell, cellIndex)=>{\n            const value = $09e991522ca7e64e$var$boardState[rowIndex][cellIndex];\n            if (value === 2048) isWin = true;\n        });\n    });\n    if (isWin) {\n        $09e991522ca7e64e$var$game.status = \"win\";\n        $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n    }\n};\nconst $09e991522ca7e64e$var$handleMove = (direction)=>{\n    let canMove = false;\n    if (direction === \"up\" && $09e991522ca7e64e$var$game.canMoveUp()) {\n        $09e991522ca7e64e$var$game.moveUp();\n        canMove = true;\n    } else if (direction === \"down\" && $09e991522ca7e64e$var$game.canMoveDown()) {\n        $09e991522ca7e64e$var$game.moveDown();\n        canMove = true;\n    } else if (direction === \"left\" && $09e991522ca7e64e$var$game.canMoveLeft()) {\n        $09e991522ca7e64e$var$game.moveLeft();\n        canMove = true;\n    } else if (direction === \"right\" && $09e991522ca7e64e$var$game.canMoveRight()) {\n        $09e991522ca7e64e$var$game.moveRight();\n        canMove = true;\n    }\n    if (canMove) {\n        $09e991522ca7e64e$var$renderDom(direction);\n        $09e991522ca7e64e$var$displayText();\n        if (!$09e991522ca7e64e$var$game.canMoveUp() && !$09e991522ca7e64e$var$game.canMoveDown() && !$09e991522ca7e64e$var$game.canMoveLeft() && !$09e991522ca7e64e$var$game.canMoveRight() && $09e991522ca7e64e$var$game.getStatus() !== \"idle\") {\n            $09e991522ca7e64e$var$game.status = \"lose\";\n            $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n        }\n        $09e991522ca7e64e$var$iWin();\n    }\n};\ndocument.addEventListener(\"click\", (e)=>{\n    if (e.target === $09e991522ca7e64e$var$buttonStart && $09e991522ca7e64e$var$game.getStatus() === \"idle\") {\n        $09e991522ca7e64e$var$game.status = \"playing\";\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$startGame();\n        $09e991522ca7e64e$var$displayText();\n        $09e991522ca7e64e$var$buttonStart.textContent = \"Restart\";\n        $09e991522ca7e64e$var$buttonStart.classList.remove(\"start\");\n        $09e991522ca7e64e$var$buttonStart.classList.add(\"restart\");\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n        document.addEventListener(\"keydown\", (ev)=>{\n            const keyDirection = {\n                ArrowUp: \"up\",\n                ArrowDown: \"down\",\n                ArrowLeft: \"left\",\n                ArrowRight: \"right\"\n            };\n            if (keyDirection[ev.key]) $09e991522ca7e64e$var$handleMove(keyDirection[ev.key]);\n        });\n    } else if (e.target === $09e991522ca7e64e$var$buttonStart && $09e991522ca7e64e$var$game.getStatus() !== \"idle\") {\n        $09e991522ca7e64e$var$restart();\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    }\n});\nconst $09e991522ca7e64e$var$hammer = new (0, (/*@__PURE__*/$parcel$interopDefault($0d122d992128478a$exports)))(document.body);\n$09e991522ca7e64e$var$hammer.get(\"swipe\").set({\n    direction: (0, (/*@__PURE__*/$parcel$interopDefault($0d122d992128478a$exports))).DIRECTION_ALL\n});\n$09e991522ca7e64e$var$hammer.on(\"swipeleft\", ()=>$09e991522ca7e64e$var$handleMove(\"left\"));\n$09e991522ca7e64e$var$hammer.on(\"swiperight\", ()=>$09e991522ca7e64e$var$handleMove(\"right\"));\n$09e991522ca7e64e$var$hammer.on(\"swipeup\", ()=>$09e991522ca7e64e$var$handleMove(\"up\"));\n$09e991522ca7e64e$var$hammer.on(\"swipedown\", ()=>$09e991522ca7e64e$var$handleMove(\"down\"));\n\n\n//# sourceMappingURL=index.6920fa32.js.map\n","/* eslint-disable no-console */\n'use strict';\nimport Hammer from 'hammerjs';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst table = document.querySelector('tbody');\nlet boardState = game.getState();\nconst gameScoreText = document.querySelector('.game-score');\nconst gameScoreRecordText = document.querySelector('.record');\nlet gameScore = 0;\nlet highScore = parseInt(localStorage.getItem('highScore')) || 0;\n\ngameScoreRecordText.textContent = highScore;\nconsole.log(game.getStatus());\n\nconst displayText = () => {\n  gameScore = 0;\n\n  Array.from(table.rows).forEach((row) => {\n    Array.from(row.cells).forEach((cell) => {\n      const cellValue = parseFloat(cell.textContent) || 0;\n\n      gameScore += cellValue;\n    });\n  });\n\n  gameScoreText.textContent = `${gameScore}`;\n\n  if (gameScore > highScore) {\n    highScore = gameScore;\n    localStorage.setItem('highScore', highScore);\n    gameScoreRecordText.textContent = highScore;\n  }\n};\n\nconst startGameBoard = () => {\n  const randomRow1 = Math.floor(Math.random() * boardState.length);\n  const randomCol1 = Math.floor(Math.random() * boardState[randomRow1].length);\n  const randomChance1 = Math.random();\n\n  const randomValue1 = randomChance1 < 0.1 ? 4 : 2;\n\n  let randomRow2, randomCol2, randomValue2;\n  let positionIsSame = true;\n\n  do {\n    randomRow2 = Math.floor(Math.random() * boardState.length);\n    randomCol2 = Math.floor(Math.random() * boardState[randomRow2].length);\n\n    const randomChance2 = Math.random();\n\n    randomValue2 = randomChance2 < 0.1 ? 4 : 2;\n\n    positionIsSame = randomRow1 === randomRow2 && randomCol1 === randomCol2;\n  } while (positionIsSame);\n\n  boardState[randomRow1][randomCol1] = randomValue1;\n  boardState[randomRow2][randomCol2] = randomValue2;\n};\n\nconst renderDom = (direction) => {\n  Array.from(table.rows).forEach((row) => {\n    Array.from(row.cells).forEach((cell) => {\n      cell.textContent = '';\n      cell.classList.remove(...cell.classList);\n      cell.classList.add('field-cell');\n    });\n  });\n\n  const movedCells = game.getMovedCells();\n\n  Array.from(table.rows).forEach((row, rowIndex) => {\n    Array.from(row.cells).forEach((cell, cellIndex) => {\n      const value = boardState[rowIndex][cellIndex];\n\n      if (value !== 0) {\n        cell.textContent = value;\n        cell.classList.add(`field-cell--${value}`);\n\n        const isMoved = movedCells.some(\n          (movedCell) =>\n            movedCell.row === rowIndex && movedCell.col === cellIndex,\n        );\n\n        if (isMoved && direction) {\n          cell.classList.add(`field-cell-moving-${direction}`);\n        }\n      }\n\n      setTimeout(() => {\n        if (direction) {\n          cell.classList.remove(`field-cell-moving-${direction}`);\n        }\n      }, 100);\n    });\n  });\n};\n\nconst startGame = () => {\n  startGameBoard();\n  renderDom();\n};\n\nconst buttonStart = document.querySelector('.start');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\n\nconst restart = () => {\n  game.status = 'idle';\n  game.restart();\n  boardState = game.getState();\n  gameScore = 0;\n  gameScoreText.textContent = '0';\n\n  renderDom();\n\n  buttonStart.textContent = 'Start';\n  buttonStart.classList.remove('restart');\n  buttonStart.classList.add('start');\n};\n\nconst iWin = () => {\n  let isWin = false;\n\n  Array.from(table.rows).forEach((row, rowIndex) => {\n    Array.from(row.cells).forEach((cell, cellIndex) => {\n      const value = boardState[rowIndex][cellIndex];\n\n      if (value === 2048) {\n        isWin = true;\n      }\n    });\n  });\n\n  if (isWin) {\n    game.status = 'win';\n    messageWin.classList.remove('hidden');\n  }\n};\n\nconst handleMove = (direction) => {\n  let canMove = false;\n\n  if (direction === 'up' && game.canMoveUp()) {\n    game.moveUp();\n    canMove = true;\n  } else if (direction === 'down' && game.canMoveDown()) {\n    game.moveDown();\n    canMove = true;\n  } else if (direction === 'left' && game.canMoveLeft()) {\n    game.moveLeft();\n    canMove = true;\n  } else if (direction === 'right' && game.canMoveRight()) {\n    game.moveRight();\n    canMove = true;\n  }\n\n  if (canMove) {\n    renderDom(direction);\n    displayText();\n\n    if (\n      !game.canMoveUp() &&\n      !game.canMoveDown() &&\n      !game.canMoveLeft() &&\n      !game.canMoveRight() &&\n      game.getStatus() !== 'idle'\n    ) {\n      game.status = 'lose';\n      messageLose.classList.remove('hidden');\n    }\n    iWin();\n  }\n};\n\ndocument.addEventListener('click', (e) => {\n  if (e.target === buttonStart && game.getStatus() === 'idle') {\n    game.status = 'playing';\n    game.start();\n    startGame();\n    displayText();\n\n    buttonStart.textContent = 'Restart';\n    buttonStart.classList.remove('start');\n    buttonStart.classList.add('restart');\n    messageStart.classList.add('hidden');\n\n    document.addEventListener('keydown', (ev) => {\n      const keyDirection = {\n        ArrowUp: 'up',\n        ArrowDown: 'down',\n        ArrowLeft: 'left',\n        ArrowRight: 'right',\n      };\n\n      if (keyDirection[ev.key]) {\n        handleMove(keyDirection[ev.key]);\n      }\n    });\n  } else if (e.target === buttonStart && game.getStatus() !== 'idle') {\n    restart();\n    messageLose.classList.add('hidden');\n    messageStart.classList.remove('hidden');\n    messageWin.classList.add('hidden');\n  }\n});\n\nconst hammer = new Hammer(document.body);\n\nhammer.get('swipe').set({ direction: Hammer.DIRECTION_ALL });\n\nhammer.on('swipeleft', () => handleMove('left'));\nhammer.on('swiperight', () => handleMove('right'));\nhammer.on('swipeup', () => handleMove('up'));\nhammer.on('swipedown', () => handleMove('down'));\n","/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n","/* eslint-disable no-console */\n'use strict';\n\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState;\n    this.board = JSON.parse(JSON.stringify(initialState));\n    this.previousBoard = JSON.parse(JSON.stringify(initialState));\n    this.status = 'idle';\n    this.score = 0;\n\n    // eslint-disable-next-line no-console\n  }\n\n  savePreviousState() {\n    this.previousBoard = JSON.parse(JSON.stringify(this.board));\n  }\n\n  getMovedCells() {\n    const movedCells = [];\n\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (this.board[row][col] !== this.previousBoard[row][col]) {\n          movedCells.push({ row, col });\n        }\n      }\n    }\n\n    return movedCells;\n  }\n\n  moveLeft() {\n    this.savePreviousState();\n\n    for (let row = 0; row < this.board.length; row++) {\n      const currentRow = [];\n\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (this.board[row][col] !== 0) {\n          currentRow.push(this.board[row][col]);\n        }\n      }\n\n      while (currentRow.length < this.board[row].length) {\n        currentRow.push(0);\n      }\n\n      for (let col = 0; col < this.board[row].length; col++) {\n        this.board[row][col] = currentRow[col];\n      }\n\n      for (let col = 0; col < this.board[row].length - 1; col++) {\n        if (\n          this.board[row][col] === this.board[row][col + 1] &&\n          this.board[row][col] !== 0\n        ) {\n          this.board[row][col] *= 2;\n          this.board[row][col + 1] = 0;\n        }\n      }\n\n      const newRow = [];\n\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (this.board[row][col] !== 0) {\n          newRow.push(this.board[row][col]);\n        }\n      }\n\n      while (newRow.length < this.board[row].length) {\n        newRow.push(0);\n      }\n\n      for (let col = 0; col < this.board[row].length; col++) {\n        this.board[row][col] = newRow[col];\n      }\n    }\n\n    this.updateTable();\n    this.getRandomCellNumber();\n    this.updateTable();\n  }\n\n  moveRight() {\n    this.savePreviousState();\n\n    for (let row = 0; row < this.board.length; row++) {\n      const currentRow = [];\n\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (this.board[row][col] !== 0) {\n          currentRow.push(this.board[row][col]);\n        }\n      }\n\n      while (currentRow.length < this.board[row].length) {\n        currentRow.unshift(0);\n      }\n\n      for (let col = 0; col < this.board[row].length; col++) {\n        this.board[row][col] = currentRow[col];\n      }\n\n      for (let col = this.board[row].length - 1; col > 0; col--) {\n        if (\n          this.board[row][col] === this.board[row][col - 1] &&\n          this.board[row][col] !== 0\n        ) {\n          this.board[row][col] *= 2;\n          this.board[row][col - 1] = 0;\n        }\n      }\n\n      const newRow = [];\n\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (this.board[row][col] !== 0) {\n          newRow.push(this.board[row][col]);\n        }\n      }\n\n      while (newRow.length < this.board[row].length) {\n        newRow.unshift(0);\n      }\n\n      for (let col = 0; col < this.board[row].length; col++) {\n        this.board[row][col] = newRow[col];\n      }\n    }\n\n    this.updateTable();\n    this.getRandomCellNumber();\n    this.updateTable();\n  }\n\n  moveUp() {\n    this.savePreviousState();\n\n    for (let col = 0; col < this.board[0].length; col++) {\n      const column = [];\n\n      for (let row = 0; row < this.board.length; row++) {\n        if (this.board[row][col] !== 0) {\n          column.push(this.board[row][col]);\n        }\n      }\n\n      while (column.length < this.board.length) {\n        column.push(0);\n      }\n\n      for (let row = 0; row < this.board.length; row++) {\n        this.board[row][col] = column[row];\n      }\n\n      for (let row = 0; row < this.board.length - 1; row++) {\n        if (\n          this.board[row][col] === this.board[row + 1][col] &&\n          this.board[row][col] !== 0\n        ) {\n          this.board[row][col] *= 2;\n          this.board[row + 1][col] = 0;\n        }\n      }\n\n      const newColumn = [];\n\n      for (let row = 0; row < this.board.length; row++) {\n        if (this.board[row][col] !== 0) {\n          newColumn.push(this.board[row][col]);\n        }\n      }\n\n      while (newColumn.length < this.board.length) {\n        newColumn.push(0);\n      }\n\n      for (let row = 0; row < this.board.length; row++) {\n        this.board[row][col] = newColumn[row];\n      }\n    }\n\n    this.updateTable();\n\n    this.getRandomCellNumber();\n    this.updateTable();\n  }\n  moveDown() {\n    this.savePreviousState();\n\n    for (let col = 0; col < this.board[0].length; col++) {\n      const column = [];\n\n      for (let row = 0; row < this.board.length; row++) {\n        if (this.board[row][col] !== 0) {\n          column.push(this.board[row][col]);\n        }\n      }\n\n      while (column.length < this.board.length) {\n        column.unshift(0);\n      }\n\n      for (let row = 0; row < this.board.length; row++) {\n        this.board[row][col] = column[row];\n      }\n\n      for (let row = this.board.length - 1; row > 0; row--) {\n        if (\n          this.board[row][col] === this.board[row - 1][col] &&\n          this.board[row][col] !== 0\n        ) {\n          this.board[row][col] *= 2;\n          this.board[row - 1][col] = 0;\n        }\n      }\n\n      const newColumn = [];\n\n      for (let row = 0; row < this.board.length; row++) {\n        if (this.board[row][col] !== 0) {\n          newColumn.push(this.board[row][col]);\n        }\n      }\n\n      while (newColumn.length < this.board.length) {\n        newColumn.unshift(0);\n      }\n\n      for (let row = 0; row < this.board.length; row++) {\n        this.board[row][col] = newColumn[row];\n      }\n    }\n\n    this.updateTable();\n    this.getRandomCellNumber();\n    this.updateTable();\n  }\n\n  getScore() {}\n\n  getState() {\n    return this.board;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = 'playing';\n  }\n\n  restart() {\n    this.status = 'idle';\n    this.board = JSON.parse(JSON.stringify(this.initialState));\n  }\n\n  updateTable() {\n    const table = document.querySelector('tbody');\n\n    Array.from(table.rows).forEach((row, rowIndex) => {\n      Array.from(row.cells).forEach((cell, cellIndex) => {\n        const value = this.board[rowIndex][cellIndex];\n\n        cell.textContent = value !== 0 ? value : '';\n      });\n    });\n  }\n\n  getRandomCellNumber() {\n    const emptyCells = [];\n\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const { row: randomRow, col: randomCol } =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      const randomChance = Math.random();\n\n      this.board[randomRow][randomCol] = randomChance < 0.1 ? 4 : 2;\n    }\n  }\n\n  canMoveUp() {\n    for (let row = 1; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (\n          this.board[row][col] !== 0 &&\n          (this.board[row - 1][col] === 0 ||\n            this.board[row - 1][col] === this.board[row][col])\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  canMoveDown() {\n    for (let row = 0; row < this.board.length - 1; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (\n          this.board[row][col] !== 0 &&\n          (this.board[row + 1][col] === 0 ||\n            this.board[row + 1][col] === this.board[row][col])\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  canMoveLeft() {\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 1; col < this.board[row].length; col++) {\n        if (\n          this.board[row][col] !== 0 &&\n          (this.board[row][col - 1] === 0 ||\n            this.board[row][col - 1] === this.board[row][col])\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  canMoveRight() {\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length - 1; col++) {\n        if (\n          this.board[row][col] !== 0 &&\n          (this.board[row][col + 1] === 0 ||\n            this.board[row][col + 1] === this.board[row][col])\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$parcel$interopDefault","a","__esModule","default","$0d122d992128478a$exports","window1","document1","exportName","undefined","assign","VENDOR_PREFIXES","TEST_ELEMENT","createElement","round","Math","abs","now","Date","setTimeoutContext","fn","timeout","context","setTimeout","bindFn","invokeArrayArg","arg","Array","isArray","each","obj","iterator","i","forEach","length","call","hasOwnProperty","deprecate","method","name","message","deprecationMessage","e","Error","stack","replace","log","console","warn","apply","arguments","Object","target","TypeError","output","index","source","nextKey","extend","dest","src","merge","keys","inherit","child","base","properties","childP","baseP","prototype","create","constructor","_super","boolOrFn","val","args","addEventListeners","types","handler","splitStr","type","addEventListener","removeEventListeners","removeEventListener","hasParent","node","parent","parentNode","inStr","str","find","indexOf","trim","split","inArray","findByKey","toArray","slice","uniqueArray","key","sort","results","values","push","b","prefixed","property","prefix","prop","camelProp","toUpperCase","_uniqueId","getWindowForElement","element","doc","ownerDocument","defaultView","parentWindow","SUPPORT_TOUCH","SUPPORT_POINTER_EVENTS","SUPPORT_ONLY_TOUCH","MOBILE_REGEX","test","navigator","userAgent","INPUT_TYPE_TOUCH","INPUT_TYPE_MOUSE","PROPS_XY","PROPS_CLIENT_XY","Input","manager","callback","self1","options","inputTarget","domHandler","ev","enable","init","inputHandler","eventType","input","session","pointers","pointersLength","firstInput","firstMultiple","offsetCenter","center","offset","prevDelta","prevInput","overallVelocity","start","pointersLen","changedPointersLen","changedPointers","isFirst","isFinal","INPUT_END","simpleCloneInputData","getCenter","timeStamp","deltaTime","angle","getAngle","distance","getDistance","offsetDelta","x","deltaX","y","deltaY","offsetDirection","getDirection","getVelocity","overallVelocityX","overallVelocityY","scale","end","rotation","maxPointers","computeIntervalInputData","velocity","velocityX","velocityY","direction","last","lastInterval","v","srcEvent","emit","recognize","clientX","clientY","p1","p2","props","sqrt","atan2","PI","evEl","evTarget","evWin","destroy","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","MouseInput","pressed","button","which","pointerType","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","PointerEventInput","store","pointerEvents","MSPointerEvent","PointerEvent","removePointer","toLowerCase","isTouch","storeIndex","pointerId","splice","SINGLE_TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","SingleTouchInput","started","normalizeSingleTouches","all","touches","changed","changedTouches","concat","TOUCH_INPUT_MAP","TouchInput","targetIds","getTouches","allTouches","INPUT_START","identifier","targetTouches","changedTargetTouches","filter","touch","TouchMouseInput","mouse","primaryTouch","lastTouches","recordTouches","eventData","setLastTouch","lastTouch","lts","isSyntheticEvent","t","dx","dy","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","PREFIXED_TOUCH_ACTION","style","NATIVE_TOUCH_ACTION","TOUCH_ACTION_COMPUTE","TOUCH_ACTION_AUTO","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_NONE","TOUCH_ACTION_PAN_X","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MAP","getTouchActionProps","touchMap","cssSupports","CSS","supports","TouchAction","value","set","Recognizer","val1","defaults","id","state","simultaneous","requireFail","stateStr","directionStr","getRecognizerByNameIfManager","otherRecognizer","recognizer","get","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","count","Hammer","val2","recognizers","preset","Manager","inputClass","handlers","oldCssProps","touchAction","toggleCssProps","item","add","recognizeWith","requireFailure","cssProps","compute","actions","update","getTouchAction","cleanTouchActions","hasPanX","hasPanY","join","preventDefaults","prevented","preventDefault","hasNone","isTapPointer","isTapMovement","isTapTouchTime","DIRECTION_LEFT","DIRECTION_UP","preventSrc","dropRecognizeWith","dropRequireFailure","hasRequireFailures","canRecognizeWith","event","additionalEvent","tryEmit","canEmit","STATE_FAILED","inputDataClone","reset","STATE_RECOGNIZED","process","STATE_BEGAN","attrTest","optionPointers","isRecognized","isValid","threshold","DIRECTION_HORIZONTAL","directionTest","hasMoved","inOut","time","validPointers","validMovement","validTime","clearTimeout","taps","interval","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","VERSION","domEvents","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","stop","force","stopped","curRecognizer","existing","remove","on","events","off","data","gestureEvent","createEvent","initEvent","gesture","dispatchEvent","INPUT_MOVE","INPUT_CANCEL","STATE_POSSIBLE","STATE_CHANGED","STATE_ENDED","STATE_CANCELLED","DIRECTION_NONE","DIRECTION_RIGHT","DIRECTION_DOWN","DIRECTION_VERTICAL","DIRECTION_ALL","Tap","Pan","Swipe","Pinch","Rotate","Press","freeGlobal","self","define","amd","window","document","$09e991522ca7e64e$var$game","initialState","board","JSON","parse","stringify","previousBoard","status","score","savePreviousState","getMovedCells","movedCells","row","col","moveLeft","currentRow","newRow","updateTable","getRandomCellNumber","moveRight","unshift","moveUp","column","newColumn","moveDown","getScore","getState","getStatus","restart","from","table","querySelector","rows","rowIndex","cells","cell","cellIndex","textContent","emptyCells","randomRow","randomCol","floor","random","randomChance","canMoveUp","canMoveDown","canMoveLeft","canMoveRight","$09e991522ca7e64e$var$table","$09e991522ca7e64e$var$boardState","$09e991522ca7e64e$var$gameScoreText","$09e991522ca7e64e$var$gameScoreRecordText","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$highScore","parseInt","localStorage","getItem","$09e991522ca7e64e$var$displayText","cellValue","parseFloat","setItem","$09e991522ca7e64e$var$startGameBoard","randomRow2","randomCol2","randomValue2","randomRow1","randomCol1","positionIsSame","randomChance2","randomChance1","$09e991522ca7e64e$var$renderDom","classList","some","movedCell","$09e991522ca7e64e$var$startGame","$09e991522ca7e64e$var$buttonStart","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$restart","$09e991522ca7e64e$var$iWin","isWin","$09e991522ca7e64e$var$handleMove","canMove","keyDirection","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","$09e991522ca7e64e$var$hammer","body"],"version":3,"file":"index.6920fa32.js.map"}